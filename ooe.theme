<?php

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Render\Markup;

require_once(__DIR__ . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . 'preprocess.php');

/**
 * Implements hook_library_info_build().
 *
 * Dynamically link the components into Drupal!
 *
 * for each namespace
 *   for each component in each namespace
 *     create a library
 *     if there is css, add it to the library
 *     if there is js, add it to the library
 *     if there are dependencies, declare them
 *   end component loop
 * end namespace loop
 */
function ooe_library_info_build(): array {

  $libraries = [];

  /** @var \Drupal\Core\Extension\ThemeExtensionList $extension_theme_list */
  $extension_theme_list = \Drupal::service('extension.list.theme');
  foreach ($extension_theme_list->getExtensionInfo('ooe')['components']['namespaces'] as $namespace) {
    $namespace_path = $extension_theme_list->getPath('ooe') . DIRECTORY_SEPARATOR . $namespace;
    if (file_exists($namespace_path)) {
      $components = new DirectoryIterator($namespace_path);
      foreach ($components as $component) {

        $library_name = "ooe.{$component->getFilename()}";

        // Resolve javascript files.
        if (file_exists($component->getPathname() . '/dist/scripts.js')) {
          $libraries[$library_name]['js'] = [$namespace . '/' . $component->getFilename() . '/dist/scripts.js' => []];
        }

        // Resolve CSS files.
        if (file_exists($component->getPathname() . '/dist/styles.css')) {
          $libraries[$library_name]['css']['theme'] = [$namespace . '/' . $component->getFilename() . '/dist/styles.css' => []];
        }

        // Resolve dependencies.
        $package_manifest = $component->getPathname() . '/package.json';
        if (file_exists($package_manifest)) {
          $json = Json::decode(file_get_contents($package_manifest));
          foreach ($json['dependencies'] as $dependency => $version) {
            $dependency_library_name = str_replace('@psu-ooe', 'ooe', $dependency);
            $libraries[$library_name]['dependencies'][] = $dependency_library_name;
          }
        }
      }
    }
  }
  return $libraries;
}

/**
 * Implements hook_preprocess_html().
 *
 * Adds the sprite component build artifact to the bottom of every page.
 */
function ooe_preprocess_html(array &$variables) {

  /** @var \Drupal\Core\Extension\ThemeExtensionList $extension_theme_list */
  $extension_theme_list = \Drupal::service('extension.list.theme');

  $sprites_svg = implode(DIRECTORY_SEPARATOR, [
    $extension_theme_list->getPath('ooe'),
    'components',
    'atoms',
    'sprite',
    'dist',
    'sprites.svg',
  ]);

  if (file_exists($sprites_svg)) {

    // Be sure to sanitize the markup, as it's a third party dependency now.
    $safe_svg_markup = Xss::filter(file_get_contents($sprites_svg), ['svg', 'defs', 'path', 'g', 'circle']);

    $variables['page_bottom'][] = [
      '#type' => 'markup',
      '#markup' => Markup::create($safe_svg_markup),
    ];
  }
}
